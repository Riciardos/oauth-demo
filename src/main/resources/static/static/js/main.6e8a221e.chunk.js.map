{"version":3,"sources":["ChatWindow.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","chatSection","width","height","headBG","backgroundColor","borderRight500","borderRight","messageArea","overflowY","getAlignment","message","window","googleUser","getBasicProfile","getId","principal","userId","sendMessage","a","console","log","JSON","stringify","idToken","getAuthResponse","id_token","fetch","method","headers","Headers","body","then","data","fetchMessages","state","setState","response","json","messages","getName","getImageUrl","ChatWindow","classes","useState","setMessage","useEffect","interval","setInterval","clearInterval","Grid","container","item","xs","Typography","variant","className","component","Paper","List","ListItem","button","ListItemIcon","Avatar","alt","src","ListItemText","primary","Divider","style","padding","TextField","id","label","fullWidth","filter","value","index","self","findIndex","v","map","chatMessage","name","align","secondary","moment","localDateTime","format","onSubmit","event","preventDefault","onInputCapture","e","target","Fab","color","aria-label","App","data-onsuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e8a221e.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport moment from 'moment';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    chatSection: {\n        width: '100%',\n        height: '80vh'\n    },\n    headBG: {\n        backgroundColor: '#e0e0e0'\n    },\n    borderRight500: {\n        borderRight: '1px solid #e0e0e0'\n    },\n    messageArea: {\n        height: '70vh',\n        overflowY: 'auto'\n    }\n});\n\nconst getAlignment = (message) => {\n    if (window.googleUser == null) {\n        return;\n    }\n    const id = window.googleUser.getBasicProfile().getId();\n    return id === message.principal.userId ? 'left' : 'right'\n}\n\nconst sendMessage = async (message) => {\n    console.log(\"Message:\", JSON.stringify(message))\n    if (window.googleUser == null || message == null) {\n        return\n    }\n    const idToken = window.googleUser.getAuthResponse().id_token;\n    await fetch(\"http://localhost:8080/api/post-message\",\n        {\n            method: 'post',\n            headers: new Headers({\n                'Authorization': 'Bearer ' + idToken\n            }),\n            body: message\n        })\n        .then(data => {\n            console.log(\"Posted message:\" + message)\n\n        })\n}\n\nconst fetchMessages = async (state, setState) => {\n    if (window.googleUser == null) {\n        return;\n    }\n\n    const idToken = window.googleUser.getAuthResponse().id_token;\n    await fetch(\"http://localhost:8080/api/get-messages\",\n        {\n            method: 'get',\n            headers: new Headers({\n                'Authorization': 'Bearer ' + idToken\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(\"DATA \" + JSON.stringify(data))\n            if (data) {\n                setState({messages:data});\n            }\n        })\n}\n\nconst getName = () => \"Name\";\nconst getImageUrl = () => \"N/A\";\n\nconst getBasicProfile = () => {\n    return {getName, getImageUrl};\n}\n\n\nconst ChatWindow = () => {\n    const classes = useStyles();\n\n    const [state, setState] = useState({messages:[]});\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        const interval = setInterval(() => fetchMessages(state, setState), 5000)\n        return () => clearInterval(interval)\n    })\n    const googleUser = window.googleUser || {getBasicProfile};\n    return (\n        <div>\n            <h2>Welcome to the Matchesfashion OAuth Demo</h2>;\n\n            <Grid container>\n                <Grid item xs={12} >\n                    <Typography variant=\"h5\" className=\"header-message\">Chat</Typography>\n                </Grid>\n            </Grid>\n            <Grid container component={Paper} className={classes.chatSection}>\n                <Grid item xs={3} className={classes.borderRight500}>\n                    <List>\n                        <ListItem button key={googleUser.getBasicProfile().getName()}>\n                            <ListItemIcon>\n                                <Avatar alt={googleUser.getBasicProfile().getName()} src={googleUser.getBasicProfile().getImageUrl()} />\n                            </ListItemIcon>\n                            <ListItemText primary={googleUser.getBasicProfile().getName()}></ListItemText>\n                        </ListItem>\n                    </List>\n                    <Divider />\n                    <Grid item xs={12} style={{padding: '10px'}}>\n                        <TextField id=\"outlined-basic-email\" label=\"Search\" variant=\"outlined\" fullWidth />\n                    </Grid>\n                    <Divider />\n                    <List>\n                        {state.messages && state.messages.filter((value, index, self) => {\n                            return self.findIndex(v => v.principal.userId === value.principal.userId) === index;\n                        }).map((chatMessage) => (\n                            <ListItem button key={chatMessage.principal.name}>\n                                <ListItemIcon>\n                                    <Avatar alt={chatMessage.principal.name} />\n                                </ListItemIcon>\n                                <ListItemText primary={chatMessage.principal.name}></ListItemText>\n                            </ListItem>\n                        ))}\n                    </List>\n                </Grid>\n                <Grid item xs={9}>\n                    <List className={classes.messageArea}>\n                            {state.messages.map((chatMessage, index) => (\n                                <ListItem key={index}>\n\n                                <Grid container>\n                                    <Grid item xs={8}>\n                                        <ListItemText align={getAlignment(chatMessage)} secondary={chatMessage.principal.name}></ListItemText>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <ListItemText align={getAlignment(chatMessage)} primary={chatMessage.message}></ListItemText>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <ListItemText align={getAlignment(chatMessage)} secondary={moment(chatMessage.localDateTime).format(\"hh:mm\")}></ListItemText>\n                                    </Grid>\n                                </Grid>\n                                </ListItem>\n                            ))}\n                    </List>\n\n                    <Divider />\n\n                    <form id=\"input-form\" onSubmit={(event) => {\n                        event.preventDefault();\n                        sendMessage(message)\n                            .then(() => fetchMessages(state, setState))\n                    }}>\n                        <Grid container style={{padding: '20px'}}>\n\n                            <Grid item xs={11}>\n                                <TextField id=\"outlined-basic-email\" label=\"Type Something\" fullWidth onInputCapture={(e) => setMessage(e.target.value)}/>\n                            </Grid>\n                            <Grid xs={1} align=\"right\">\n                                <Fab color=\"primary\" aria-label=\"add\"><SendIcon /></Fab>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default ChatWindow;","import './App.css';\nimport ChatWindow from \"./ChatWindow\";\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                ricardoschuller.com\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"g-signin2\" data-onsuccess=\"onSignIn\"></div>\n        <ChatWindow/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}